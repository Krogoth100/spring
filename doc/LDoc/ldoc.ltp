# local localurl = module and module.name and ldoc.ref_to_module(module) or ("../" .. ldoc.output .. ".html")
# localurl = localurl:gsub("%.%./", "ldoc/")
# modname = module and module.name or "Home"
# local function M(txt,item) return ldoc.markup(txt,item,ldoc.plain) end
---
layout: default
title: $(modname)
permalink: $(localurl)
description: $(module and M(module.summary,module) or "")
parent: Lua API
# -- do not publish if index page
$(module or "published: false")
---

{% raw %}
# local no_spaces = ldoc.no_spaces
# local display_name = ldoc.display_name
# local iter = ldoc.modules.iter
# local nowrap = ldoc.wrap and '' or 'nowrap'
# if ldoc.body then -- verbatim HTML as contents; 'non-code' entries
    $(ldoc.body)
# elseif module then -- module documentation
    <h1>$(ldoc.module_typename(module)) <code>$(module.name)</code></h1>
    <p>$(M(module.summary,module))</p>
    <p>$(M(module.description,module))</p>
#   if module.tags.include then
      $(M(ldoc.include_file(module.tags.include)))
#   end
#   if module.see then
      <h3>See also:</h3>
      <ul>
#       for see in iter(module.see) do
          <li><a href="$(ldoc.href(see))">$(see.label)</a></li>
#       end
      </ul>
#   end -- if see
#   if module.usage then
      <h3>Usage:</h3>
      <ul>
#     for usage in iter(module.usage) do
        <li><pre class="example">$(ldoc.escape(usage))</pre></li>
#     end -- for
      </ul>
#   end -- if usage
#   if module.info then
      <h3>Info:</h3>
      <ul>
#     for tag, value in module.info:iter() do
        <li><strong>$(tag)</strong>: $(M(value,module))</li>
#     end
      </ul>
#   end -- if module.info

#   if not ldoc.no_summary then
#   -- bang out the tables of item types for this module (e.g Functions, Tables, etc)
#     for kind,items in module.kinds() do
        <h2 class="no_anchor"><a href="#$(no_spaces(kind))">$(kind)</a></h2>
        <dl class="big-dt">
#         for item in items() do
            <dt>
              <a href="#$(item.name)">$(item.name)</a>
            </dt>
            <dd>
              $(M(item.summary,item))
            </dd>
#         end -- for items
        </dl>
#     end -- for kinds
#   end -- if not no_summary

#   --- currently works for both Functions and Tables. The params field either contains
#   --- function parameters or table fields.
#   local show_return = not ldoc.no_return_or_parms
#   local show_parms = show_return
#   for kind, items in module.kinds() do
#     local kitem = module.kinds:get_item(kind)
#     local has_description = kitem and ldoc.descript(kitem) ~= ""
      <h2 id="$(no_spaces(kind))" class="section-header $(has_description and 'has-description')">
        $(kind)
      </h2>
      $(M(module.kinds:get_section_description(kind),nil))
#     if kitem then
#       if has_description then
        <p>$(M(ldoc.descript(kitem),kitem))</p>
#       end
#       if kitem.usage then
        <h3>Usage:</h3>
        <pre class="example">$(ldoc.prettify(kitem.usage[1]))</pre>
#        end
#     end
#     for item in items() do
        <h3 id="$(item.name)">
#         if ldoc.prettify_files and ldoc.is_file_prettified[item.module.file.filename] then
          <a style="float:right;" href="$(ldoc.source_ref(item))">line $(item.lineno)</a>
#         end
          $(display_name(item))
        </h3>
        <p>$(item.summary)</p>
        <div class="code-example">
        <p>
          $(item.description)
        </p>

#      if ldoc.custom_tags then
#        for custom in iter(ldoc.custom_tags) do
#        local tag = item.tags[custom[1]]
#        if tag and not custom.hidden then
           <h4 class="no_anchor">$(custom.title or custom[1]):</h4>
           <ul>
#          for value in iter(tag) do
             <li>$(custom.format and custom.format(value) or M(value))</li>
#          end -- for
#        end -- if tag
           </ul>
#      end -- iter tags
#    end

#   if show_parms and item.params and#item.params > 0 then
#     local subnames = module.kinds:type_of(item).subnames
#     if subnames then
           <h4 class="no_anchor">$(subnames):</h4>
#     end
           <ol>
#    for parm in iter(item.params) do
#      local param,sublist = item:subparam(parm)
#      if sublist then
             <li><span class="parameter">$(sublist)</span>$(M(item.params.map[sublist],item))
               <ul>
#      end
#      for p in iter(param) do
#         local name,tp,def = item:display_name_of(p), ldoc.typename(item:type_of_param(p)), item:default_of_param(p)
                 <li>
                   <code>$(name)</code>
#        if tp ~= '' then
                   <strong>$(tp)</strong>
#        end
                   $(M(item.params.map[p],item))
#        if def == true then
                   (<em>optional</em>)
#       elseif def then
                   (<em>default</em> $(def))
#        end
#        if item:readonly(p) then
                   <em>readonly</em>
#        end
                 </li>
#      end
#      if sublist then
             </li></ul>
#      end
#    end -- for
           </ol>
#    end -- if params

#   if show_return and item.retgroups then local groups = item.retgroups
      <h4 class="no_anchor">Returns:</h4>
#       for i,group in ldoc.ipairs(groups) do
          <ol>
#           for r in group:iter() do local type, ctypes = item:return_type(r); local rt = ldoc.typename(type)
              <li>
#             if rt ~= '' then
                <strong>$(rt)</strong>
#             end
              $(M(r.text,item))</li>
#             if ctypes then
                <ul>
#                 for c in ctypes:iter() do
                    <li><strong>$(c.name)</strong>
                    <code>$(ldoc.typename(c.type))</code>
                    $(M(c.comment,item))</li>
#                 end
                </ul>
#             end -- if ctypes
#           end -- for r
          </ol>
#         if i <#groups then
           <h4 class="no_anchor">Or</h4>
#         end
#         end -- for group
#       end -- if returns

#       if show_return and item.raise then
          <h4 class="no_anchor">Raises:</h4>
          $(M(item.raise,item))
#       end

#       if item.see then
          <h4 class="no_anchor">See also:</h4>
          <ul>
#           for see in iter(item.see) do
              <li><a href="$(ldoc.href(see))">$(see.label)</a></li>
#           end -- for
          </ul>
#       end -- if see

#       if item.usage then
          <h4 class="no_anchor">Usage:</h4>
          <ul>
#         for usage in iter(item.usage) do
            <li><pre class="example">$(ldoc.prettify(usage))</pre></li>
#         end -- for
          </ul>
#       end -- if usage
        </div>
#     end -- for items
#   end -- for kinds

# else -- if module; project-level contents
#   if ldoc.description then
      <h2>$(M(ldoc.description,nil))</h2>
#   end
#   if ldoc.full_description then
      <p>$(M(ldoc.full_description,nil))</p>
#   end

#   for kind, mods in ldoc.kinds() do
      <h2>$(kind)</h2>
#     kind = kind:lower()
      <table class="module_list">
#       for m in mods() do
          <tr>
            <td class="name"  $(nowrap)><a href="$(no_spaces(kind))/$(m.name).html">$(m.name)</a></td>
            <td class="summary">$(M(ldoc.strip_header(m.summary),m))</td>
          </tr>
#       end -- for modules
      </table>
#   end -- for kinds
# end -- if module
{% endraw %}
